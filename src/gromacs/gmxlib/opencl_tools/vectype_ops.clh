/*
 * This file is part of the GROMACS molecular simulation package.
 *
 * Copyright (c) 2012, by the GROMACS development team, led by
 * Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,
 * and including many others, as listed in the AUTHORS file in the
 * top-level source directory and at http://www.gromacs.org.
 *
 * GROMACS is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * GROMACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GROMACS; if not, see
 * http://www.gnu.org/licenses, or write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
 *
 * If you want to redistribute modifications to GROMACS, please
 * consider that scientific software is very special. Version
 * control is crucial - bugs must be traceable. We will be happy to
 * consider code for inclusion in the official distribution, but
 * derived work must not be called official GROMACS. Details are found
 * in the README & COPYING files - if they are missing, get the
 * official version at http://www.gromacs.org.
 *
 * To help us fund GROMACS development, we humbly ask that you cite
 * the research papers on the package. Check out http://www.gromacs.org.
 */

#ifndef VECTYPE_OPS_CLH
#define VECTYPE_OPS_CLH

#define _VECTYPE_OPS_INLINE_

#if defined(_VECTYPE_OPS_INLINE_)
#define _INLINE_ATTR_ inline
#else
#define _INLINE_ATTR_ noinline
#endif

/**** float3 ****/
_INLINE_ATTR_   float3 make_float3(float s)
{
    return (float3)(s, s, s);
}
_INLINE_ATTR_   float3 make_float3(float4 a)
{
    return (float3)(a.x, a.y, a.z);
}

_INLINE_ATTR_   float norm(float4 a)
{
    float3 b = (float3)a;
    return sqrt(dot(b,b));
}
_INLINE_ATTR_   float norm-ref(float4 a)
{
    return sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
}
_INLINE_ATTR_   float norm2(float4 a)
{
    float3 b = (float3)a;    
    return dot(b,b);
}
_INLINE_ATTR_   float norm2-ref(float4 a)
{
    return (a.x * a.x + a.y * a.y + a.z * a.z);
}
_INLINE_ATTR_   float dist3(float4 a, float4 b)
{
    return distance((float3)b,(float3)a);
}
_INLINE_ATTR_   float dist3-ref(float4 a, float4 b)
{
    return norm-ref(b - a);
}
_INLINE_ATTR_  void atomicAdd(float *addr, float val)
{
    atomic_add(addr,val);
}
_INLINE_ATTR_  void atomicAdd(float4 *addr, float4 val)
{
    atomicAdd(&addr->x, val.x);
    atomicAdd(&addr->y, val.y);
    atomicAdd(&addr->z, val.z);
}
/****************************************************************/

/**** float4 ****/
_INLINE_ATTR_   float4 make_float4(float s)
{
    return (float4)(s, s, s, s);
}
_INLINE_ATTR_   float4 make_float4(float4 a)
{
    return (float4)(a.x, a.y, a.z, 0.0f);
}

_INLINE_ATTR_   float norm(float4 a)
{
    return sqrt(dot(a,a));
}

_INLINE_ATTR_   float norm-ref(float4 a)
{
    return sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
}

_INLINE_ATTR_   float dist3(float4 a, float4 b)
{
    return norm(b - a);
}

_INLINE_ATTR_   float dist3-ref(float4 a, float4 b)
{
    return norm-ref(b - a);
}
#endif /* VECTYPE_OPS_CLH */
