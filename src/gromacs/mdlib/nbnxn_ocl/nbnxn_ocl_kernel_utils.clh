/*
 * This file is part of the GROMACS molecular simulation package.
 *
 * Copyright (c) 2012,2013,2014, by the GROMACS development team, led by
 * Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,
 * and including many others, as listed in the AUTHORS file in the
 * top-level source directory and at http://www.gromacs.org.
 *
 * GROMACS is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * GROMACS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with GROMACS; if not, see
 * http://www.gnu.org/licenses, or write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
 *
 * If you want to redistribute modifications to GROMACS, please
 * consider that scientific software is very special. Version
 * control is crucial - bugs must be traceable. We will be happy to
 * consider code for inclusion in the official distribution, but
 * derived work must not be called official GROMACS. Details are found
 * in the README & COPYING files - if they are missing, get the
 * official version at http://www.gromacs.org.
 *
 * To help us fund GROMACS development, we humbly ask that you cite
 * the research papers on the package. Check out http://www.gromacs.org.
 */
 
// Test bench for vectype and kernel_utils

#include "vectype_ops.clh"

#define __IN_OPENCL_KERNEL__
//////////////////////////////////////#include "nbnxn_ocl_types.h"
#define NBNXN_GPU_CLUSTER_SIZE         8
#define NBNXN_GPU_JGROUP_SIZE       4
#define NBNXN_AVOID_SING_R2_INC  1.0e-12f
#define CL_SIZE                 (NBNXN_GPU_CLUSTER_SIZE)

#define GPU_NSUBCELL_Z 2
#define GPU_NSUBCELL_Y 2
#define GPU_NSUBCELL_X 2
#define GPU_NSUBCELL   (GPU_NSUBCELL_Z*GPU_NSUBCELL_Y*GPU_NSUBCELL_X)

#define NBNXN_GPU_NCLUSTER_PER_SUPERCLUSTER  GPU_NSUBCELL
#define NCL_PER_SUPERCL         (NBNXN_GPU_NCLUSTER_PER_SUPERCLUSTER)

#define WARP_SIZE  32

__constant sampler_t generic_sampler     = CLK_NORMALIZED_COORDS_FALSE /* Natural coords */
                                            | CLK_ADDRESS_NONE          /* No clamp/repeat*/ 
                                            | CLK_FILTER_NEAREST ;      /* No interpolation */
//-------------------

#ifndef NBNXN_OPENCL_KERNEL_UTILS_CLH
#define NBNXN_OPENCL_KERNEL_UTILS_CLH

#define __device__ 

#define WARP_SIZE_POW2_EXPONENT     (5)
#define CL_SIZE_POW2_EXPONENT       (3)  /* change this together with GPU_NS_CLUSTER_SIZE !*/
#define CL_SIZE_SQ                  (CL_SIZE * CL_SIZE)
#define FBUF_STRIDE                 (CL_SIZE_SQ)

#define ONE_SIXTH_F     0.16666667f
#define ONE_TWELVETH_F  0.08333333f


///////////////////////////////////////////////////////////////////////////////////////
// TO DO: these data structures must be shared between the OpenCL device and OpenCL host code
// 
///////////////////////////////////////////////////////////////////////////////////////////////

// Data structures shared between OpenCL device code and OpenCL host code
// TO DO: review, improve
// Replaced real by float for now, to avoid including any other header
typedef struct {
    /*real*/float c2;
    /*real*/float c3;
    /*real*/float cpot;
} shift_consts_t;

/* Used with potential switching:
 * rsw        = max(r - r_switch, 0)
 * sw         = 1 + c3*rsw^3 + c4*rsw^4 + c5*rsw^5
 * dsw        = 3*c3*rsw^2 + 4*c4*rsw^3 + 5*c5*rsw^4
 * force      = force*dsw - potential*sw
 * potential *= sw
 */
typedef struct {
    /*real*/float c3;
    /*real*/float c4;
    /*real*/float c5;
} switch_consts_t;

// Data structure shared between the OpenCL device code and OpenCL host code
// Must not contain OpenCL objects (buffers)
// TO DO: review, improve
typedef struct cl_atomdata_params
{
    int      natoms;            /**< number of atoms                              */
    int      natoms_local;      /**< number of local atoms                        */
    int      nalloc;            /**< allocation size for the atom data (xq, f)    */    

    int      ntypes;            /**< number of atom types                         */
    
    /*bool*/int     bShiftVecUploaded; /**< true if the shift vector has been uploaded   */
} cl_atomdata_params_t;

// Data structure shared between the OpenCL device code and OpenCL host code
// Must not contain OpenCL objects (buffers)
// TO DO: review, improve
typedef struct cl_nbparam_params
{

    int             eeltype;          /**< type of electrostatics, takes values from #eelCu */
    int             vdwtype;          /**< type of VdW impl., takes values from #evdwCu     */

    float           epsfac;           /**< charge multiplication factor                      */
    float           c_rf;             /**< Reaction-field/plain cutoff electrostatics const. */
    float           two_k_rf;         /**< Reaction-field electrostatics constant            */
    float           ewald_beta;       /**< Ewald/PME parameter                               */
    float           sh_ewald;         /**< Ewald/PME correction term substracted from the direct-space potential */
    float           sh_lj_ewald;      /**< LJ-Ewald/PME correction term added to the correction potential        */
    float           ewaldcoeff_lj;    /**< LJ-Ewald/PME coefficient                          */

    float           rcoulomb_sq;      /**< Coulomb cut-off squared                           */

    float           rvdw_sq;          /**< VdW cut-off squared                               */
    float           rvdw_switch;      /**< VdW switched cut-off                              */
    float           rlist_sq;         /**< pair-list cut-off squared                         */

    shift_consts_t  dispersion_shift; /**< VdW shift dispersion constants           */
    shift_consts_t  repulsion_shift;  /**< VdW shift repulsion constants            */
    switch_consts_t vdw_switch;       /**< VdW switch constants                     */   

    /* Ewald Coulomb force table data - accessed through texture memory */
    int                    coulomb_tab_size;   /**< table size (s.t. it fits in texture cache) */
    float                  coulomb_tab_scale;  /**< table scale/spacing                        */    
}cl_nbparam_params_t;


// Data structure shared between the OpenCL device code and OpenCL host code
// Must not contain OpenCL objects (buffers)
// TO DO: review, improve
typedef struct cl_plist_params
{
    int              na_c;        /**< number of atoms per cluster                  */

    int              nsci;        /**< size of sci, # of i clusters in the list     */
    int              sci_nalloc;  /**< allocation size of sci                       */   

    int              ncj4;        /**< total # of 4*j clusters                      */
    int              cj4_nalloc;  /**< allocation size of cj4                       */
   
    int              nexcl;       /**< count for excl                               */
    int              excl_nalloc; /**< allocation size of excl                      */

    /*bool*/int             bDoPrune;    /**< true if pair-list pruning needs to be
                                       done during the  current step                */
}cl_plist_params_t;


// TO DO: review, improve
typedef struct {
    int sci;            /* i-super-cluster       */
    int shift;          /* Shift vector index plus possible flags */
    int cj4_ind_start;  /* Start index into cj4  */
    int cj4_ind_end;    /* End index into cj4    */
} nbnxn_sci_t;

typedef struct {
    unsigned int imask;    /* The i-cluster interactions mask for 1 warp  */
    int          excl_ind; /* Index into the exclusion array for 1 warp   */
} nbnxn_im_ei_t;

typedef struct {
    int           cj[4];   /* The 4 j-clusters                            */
    nbnxn_im_ei_t imei[2]; /* The i-cluster mask data       for 2 warps   */
} nbnxn_cj4_t;


typedef struct {
    unsigned int pair[32]; /* Topology exclusion interaction bits for one warp,
                            * each unsigned has bitS for 4*8 i clusters
                            */
} nbnxn_excl_t;

// TO DO: place these defines in one single place
//////// Currently WARP_SIZE is defined in nbnxn_ocl_kernel_utils.clh
//////#define WARP_SIZE  32
//////
///////* Convenience defines */
//////#define NCL_PER_SUPERCL         (NBNXN_GPU_NCLUSTER_PER_SUPERCLUSTER)
//////#define CL_SIZE                 (NBNXN_GPU_CLUSTER_SIZE)

///////////////////////////////////////////////////////////////////////////////////////////////
// 
///////////////////////////////////////////////////////////////////////////////////////////////


/*! i-cluster interaction mask for a super-cluster with all NCL_PER_SUPERCL bits set */
__constant unsigned supercl_interaction_mask = ((1U << NCL_PER_SUPERCL) - 1U);

/////////////*! Apply force switch,  force + energy version. */
////////////static inline __device__
////////////void calculate_force_switch_F(__constant          cl_nbparam_t *nbparam,
////////////                              float               c6,
////////////                              float               c12,
////////////                              float               inv_r,
////////////                              float               r2,
////////////                              float              *F_invr)
////////////{
////////////    float r, r_switch;
////////////
////////////    /* force switch constants */
////////////    float disp_shift_V2 = nbparam->dispersion_shift.c2;
////////////    float disp_shift_V3 = nbparam->dispersion_shift.c3;
////////////    float repu_shift_V2 = nbparam->repulsion_shift.c2;
////////////    float repu_shift_V3 = nbparam->repulsion_shift.c3;
////////////
////////////    r         = r2 * inv_r;
////////////    r_switch  = r - nbparam->rvdw_switch;
////////////    r_switch  = r_switch >= 0.0f ? r_switch : 0.0f;
////////////
////////////    *F_invr  +=
////////////        -c6*(disp_shift_V2 + disp_shift_V3*r_switch)*r_switch*r_switch*inv_r +
////////////        c12*(-repu_shift_V2 + repu_shift_V3*r_switch)*r_switch*r_switch*inv_r;
////////////}
////////////
/*! Apply force switch, force-only version. */
static inline __device__
void calculate_force_switch_F_E(//__constant          cl_nbparam_t *nbparam,
                                __constant          cl_nbparam_params_t *nbparam,
                                float               c6,
                                float               c12,
                                float               inv_r,
                                float               r2,
                                __global float      *F_invr,
                                __global float      *E_lj)
{
    float r, r_switch;

    /* force switch constants */
    float disp_shift_V2 = nbparam->dispersion_shift.c2;
    float disp_shift_V3 = nbparam->dispersion_shift.c3;
    float repu_shift_V2 = nbparam->repulsion_shift.c2;
    float repu_shift_V3 = nbparam->repulsion_shift.c3;

    float disp_shift_F2 = nbparam->dispersion_shift.c2/3;
    float disp_shift_F3 = nbparam->dispersion_shift.c3/4;
    float repu_shift_F2 = nbparam->repulsion_shift.c2/3;
    float repu_shift_F3 = nbparam->repulsion_shift.c3/4;

    r         = r2 * inv_r;
    r_switch  = r - nbparam->rvdw_switch;
    r_switch  = r_switch >= 0.0f ? r_switch : 0.0f;

    *F_invr  +=
        -c6*(disp_shift_V2 + disp_shift_V3*r_switch)*r_switch*r_switch*inv_r +
        c12*(-repu_shift_V2 + repu_shift_V3*r_switch)*r_switch*r_switch*inv_r;
    *E_lj    +=
        c6*(disp_shift_F2 + disp_shift_F3*r_switch)*r_switch*r_switch*r_switch -
        c12*(repu_shift_F2 + repu_shift_F3*r_switch)*r_switch*r_switch*r_switch;
}

/*! Apply potential switch, force-only version. */
static inline __device__
void calculate_potential_switch_F(//__constant          cl_nbparam_t *nbparam,
                                    __constant          cl_nbparam_params_t *nbparam,
                                  float               c6,
                                  float               c12,
                                  float               inv_r,
                                  float               r2,
                                  __global float     *F_invr,
                                  __global float     *E_lj)
{
    float r, r_switch;
    float sw, dsw;

    /* potential switch constants */
    float switch_V3 = nbparam->vdw_switch.c3;
    float switch_V4 = nbparam->vdw_switch.c4;
    float switch_V5 = nbparam->vdw_switch.c5;
    float switch_F2 = nbparam->vdw_switch.c3;
    float switch_F3 = nbparam->vdw_switch.c4;
    float switch_F4 = nbparam->vdw_switch.c5;

    r        = r2 * inv_r;
    r_switch = r - nbparam->rvdw_switch;

    /* Unlike in the F+E kernel, conditional is faster here */
    if (r_switch > 0.0f)
    {
        sw      = 1.0f + (switch_V3 + (switch_V4 + switch_V5*r_switch)*r_switch)*r_switch*r_switch*r_switch;
        dsw     = (switch_F2 + (switch_F3 + switch_F4*r_switch)*r_switch)*r_switch*r_switch;

        *F_invr = (*F_invr)*sw - inv_r*(*E_lj)*dsw;
    }
}

/*! Apply potential switch, force + energy version. */
static inline __device__
void calculate_potential_switch_F_E(__constant          cl_nbparam_params_t *nbparam,
                                    float               c6,
                                    float               c12,
                                    float               inv_r,
                                    float               r2,
                                    __global float              *F_invr,
                                    __global float              *E_lj)
{
    float r, r_switch;
    float sw, dsw;

    /* potential switch constants */
    float switch_V3 = nbparam->vdw_switch.c3;
    float switch_V4 = nbparam->vdw_switch.c4;
    float switch_V5 = nbparam->vdw_switch.c5;
    float switch_F2 = nbparam->vdw_switch.c3;
    float switch_F3 = nbparam->vdw_switch.c4;
    float switch_F4 = nbparam->vdw_switch.c5;

    r        = r2 * inv_r;
    r_switch = r - nbparam->rvdw_switch;
    r_switch = r_switch >= 0.0f ? r_switch : 0.0f;

    /* Unlike in the F-only kernel, masking is faster here */
    sw       = 1.0f + (switch_V3 + (switch_V4 + switch_V5*r_switch)*r_switch)*r_switch*r_switch*r_switch;
    dsw      = (switch_F2 + (switch_F3 + switch_F4*r_switch)*r_switch)*r_switch*r_switch;

    *F_invr  = (*F_invr)*sw - inv_r*(*E_lj)*dsw;
    *E_lj   *= sw;
}

/*! Calculate LJ-PME grid force contribution with
 *  geometric combination rule.
 */
static inline __device__
void calculate_lj_ewald_comb_geom_F(read_only image2d_t     nbfp_comb_climg2d,
                                    int                typei,
                                    int                typej,
                                    float              r2,
                                    float              inv_r2,
                                    float              lje_coeff2,
                                    float              lje_coeff6_6,
                                    __global float             *F_invr)
{
    float c6grid, inv_r6_nm, cr2, expmcr2, poly;

    c6grid    = read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typei,0)).x
                * read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typej,0)).x;

    /* Recalculate inv_r6 without exclusion mask */
    inv_r6_nm = inv_r2*inv_r2*inv_r2;
    cr2       = lje_coeff2*r2;
    expmcr2   = exp(-cr2);
    poly      = 1.0f + cr2 + 0.5f*cr2*cr2;

    /* Subtract the grid force from the total LJ force */
    *F_invr  += c6grid*(inv_r6_nm - expmcr2*(inv_r6_nm*poly + lje_coeff6_6))*inv_r2;
}

/*! Calculate LJ-PME grid force + energy contribution with
 *  geometric combination rule.
 */
static inline __device__
void calculate_lj_ewald_comb_geom_F_E(read_only image2d_t     nbfp_comb_climg2d,
                                      __constant         cl_nbparam_params_t *nbparam,
                                      int                typei,
                                      int                typej,
                                      float              r2,
                                      float              inv_r2,
                                      float              lje_coeff2,
                                      float              lje_coeff6_6,
                                      float              int_bit,
                                      __global float             *F_invr,
                                      __global float             *E_lj)
{
    float c6grid, inv_r6_nm, cr2, expmcr2, poly, sh_mask;

    c6grid    = read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typei,0)).x
                * read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typej,0)).x;

    /* Recalculate inv_r6 without exclusion mask */
    inv_r6_nm = inv_r2*inv_r2*inv_r2;
    cr2       = lje_coeff2*r2;
    expmcr2   = exp(-cr2);
    poly      = 1.0f + cr2 + 0.5f*cr2*cr2;

    /* Subtract the grid force from the total LJ force */
    *F_invr  += c6grid*(inv_r6_nm - expmcr2*(inv_r6_nm*poly + lje_coeff6_6))*inv_r2;

    /* Shift should be applied only to real LJ pairs */
    sh_mask   = nbparam->sh_lj_ewald*int_bit;
    *E_lj    += ONE_SIXTH_F*c6grid*(inv_r6_nm*(1.0f - expmcr2*poly) + sh_mask);
}

/*! Calculate LJ-PME grid force + energy contribution (if E_lj != NULL) with
 *  Lorentz-Berthelot combination rule.
 *  We use a single F+E kernel with conditional because the performance impact
 *  of this is pretty small and LB on the CPU is anyway very slow.
 */
static inline __device__
void calculate_lj_ewald_comb_LB_F_E(read_only image2d_t     nbfp_comb_climg2d,
                                    __constant         cl_nbparam_params_t *nbparam,
                                    int                typei,
                                    int                typej,
                                    float              r2,
                                    float              inv_r2,
                                    float              lje_coeff2,
                                    float              lje_coeff6_6,
                                    float              int_bit,
                                    bool               with_E_lj,
                                    __global float             *F_invr,
                                    __global float             *E_lj)
{
    float c6grid, inv_r6_nm, cr2, expmcr2, poly;
    float sigma, sigma2, epsilon;

    /* sigma and epsilon are scaled to give 6*C6 */                                        
    sigma      = read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typei,0)).x
                * read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typej,0)).x; 
    epsilon    = read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typei+1,0)).x
                * read_imagef(nbfp_comb_climg2d, generic_sampler, (int2)(2*typej+1,0)).x; 

    sigma2  = sigma*sigma;
    c6grid  = epsilon*sigma2*sigma2*sigma2;

    /* Recalculate inv_r6 without exclusion mask */
    inv_r6_nm = inv_r2*inv_r2*inv_r2;
    cr2       = lje_coeff2*r2;
    expmcr2   = exp(-cr2);
    poly      = 1.0f + cr2 + 0.5f*cr2*cr2;

    /* Subtract the grid force from the total LJ force */
    *F_invr  += c6grid*(inv_r6_nm - expmcr2*(inv_r6_nm*poly + lje_coeff6_6))*inv_r2;

    if (with_E_lj==true)
    {
        float sh_mask;

        /* Shift should be applied only to real LJ pairs */
        sh_mask   = nbparam->sh_lj_ewald*int_bit;
        *E_lj    += ONE_SIXTH_F*c6grid*(inv_r6_nm*(1.0f - expmcr2*poly) + sh_mask);
    }
}

/*! Interpolate Ewald coulomb force using the table through the tex_nbfp texture.
 *  Original idea: from the OpenMM project
 */
static inline __device__
float interpolate_coulomb_force_r(
                                    read_only image2d_t     coulomb_tab_climg2d,
                                    float r, 
                                    float scale)
{
    float   normalized = scale * r;
    int     index      = (int) normalized;
    float   fract2     = normalized - index;
    float   fract1     = 1.0f - fract2;
                                        
    /* sigma and epsilon are scaled to give 6*C6 */                                        
    return read_imagef(coulomb_tab_climg2d, generic_sampler, (int2)(index,0)).x
                * read_imagef(coulomb_tab_climg2d, generic_sampler, (int2)(index,0)).x;
}

/////////////*! Calculate analytical Ewald correction term. */
////////////static inline __device__
////////////float pmecorrF(float z2)
////////////{
////////////    const float FN6 = -1.7357322914161492954e-8f;
////////////    const float FN5 = 1.4703624142580877519e-6f;
////////////    const float FN4 = -0.000053401640219807709149f;
////////////    const float FN3 = 0.0010054721316683106153f;
////////////    const float FN2 = -0.019278317264888380590f;
////////////    const float FN1 = 0.069670166153766424023f;
////////////    const float FN0 = -0.75225204789749321333f;
////////////
////////////    const float FD4 = 0.0011193462567257629232f;
////////////    const float FD3 = 0.014866955030185295499f;
////////////    const float FD2 = 0.11583842382862377919f;
////////////    const float FD1 = 0.50736591960530292870f;
////////////    const float FD0 = 1.0f;
////////////
////////////    float       z4;
////////////    float       polyFN0, polyFN1, polyFD0, polyFD1;
////////////
////////////    z4          = z2*z2;
////////////
////////////    polyFD0     = FD4*z4 + FD2;
////////////    polyFD1     = FD3*z4 + FD1;
////////////    polyFD0     = polyFD0*z4 + FD0;
////////////    polyFD0     = polyFD1*z2 + polyFD0;
////////////
////////////    polyFD0     = 1.0f/polyFD0;
////////////
////////////    polyFN0     = FN6*z4 + FN4;
////////////    polyFN1     = FN5*z4 + FN3;
////////////    polyFN0     = polyFN0*z4 + FN2;
////////////    polyFN1     = polyFN1*z4 + FN1;
////////////    polyFN0     = polyFN0*z4 + FN0;
////////////    polyFN0     = polyFN1*z2 + polyFN0;
////////////
////////////    return polyFN0*polyFD0;
////////////}

/*! Final j-force reduction; this generic implementation works with
 *  arbitrary array sizes.
 */
/* AMD OpenCL compiler error "Undeclared function index 1024" if inlined */
//static inline __device__
void reduce_force_j_generic(__local float *f_buf, __global float3 *fout,
                            int tidxi, int tidxj, int aidx)
{
    if (tidxi == 0)
    {
        float3 f = make_float3(0.0f);
        for (int j = tidxj * CL_SIZE; j < (tidxj + 1) * CL_SIZE; j++)
        {
            f.x += f_buf[                  j];
            f.y += f_buf[    FBUF_STRIDE + j];
            f.z += f_buf[2 * FBUF_STRIDE + j];
        }

        atomicAdd_g_f3(&fout[aidx], f);
        //atomicAdd(&(fout[aidx].x), f.x);
    }
}

/////////////*! Final j-force reduction; this implementation only with power of two
//////////// *  array sizes and with sm >= 3.0
//////////// */
////////////#if 0
////////////static inline __device__
////////////void reduce_force_j_warp_shfl(float3 f, float3 *fout,
////////////                              int tidxi, int aidx)
////////////{
////////////    int i;
////////////
////////////#pragma unroll 3
////////////    for (i = 0; i < 3; i++)
////////////    {
////////////        f.x += __shfl_down(f.x, 1<<i);
////////////        f.y += __shfl_down(f.y, 1<<i);
////////////        f.z += __shfl_down(f.z, 1<<i);
////////////    }
////////////
////////////    /* Write the reduced j-force on one thread for each j */
////////////    if (tidxi == 0)
////////////    {
////////////        atomicAdd(&fout[aidx], f);
////////////    }
////////////}
////////////#endif

/*! Final i-force reduction; this generic implementation works with
 *  arbitrary array sizes.
 */
static inline __device__
void reduce_force_i_generic(__local float *f_buf, __global float3 *fout,
                            float3 *fshift_buf, bool bCalcFshift,
                            int tidxi, int tidxj, int aidx)
{
    if (tidxj == 0)
    {
        float3 f = (float3)(0.0f);
        for (int j = tidxi; j < CL_SIZE_SQ; j += CL_SIZE)
        {
            f.x += f_buf[                  j];
            f.y += f_buf[    FBUF_STRIDE + j];
            f.z += f_buf[2 * FBUF_STRIDE + j];
        }

        atomicAdd_g_f3(&fout[aidx], f);

        if (bCalcFshift)
        {
            *fshift_buf += f;
        }
    }
}

/*! Final i-force reduction; this implementation works only with power of two
 *  array sizes.
 */
static inline __device__
void reduce_force_i_pow2(volatile __local float *f_buf, __global float3 *fout,
                         float3 *fshift_buf, bool bCalcFshift,
                         int tidxi, int tidxj, int aidx)
{
    int     i, j;
    float3  f = make_float3(0.0f);

    /* Reduce the initial CL_SIZE values for each i atom to half
     * every step by using CL_SIZE * i threads.
     * Can't just use i as loop variable because than nvcc refuses to unroll.
     */
    i = CL_SIZE/2;
    # pragma unroll 5
    for (j = CL_SIZE_POW2_EXPONENT - 1; j > 0; j--)
    {
        if (tidxj < i)
        {

            f_buf[                  tidxj * CL_SIZE + tidxi] += f_buf[                  (tidxj + i) * CL_SIZE + tidxi];
            f_buf[    FBUF_STRIDE + tidxj * CL_SIZE + tidxi] += f_buf[    FBUF_STRIDE + (tidxj + i) * CL_SIZE + tidxi];
            f_buf[2 * FBUF_STRIDE + tidxj * CL_SIZE + tidxi] += f_buf[2 * FBUF_STRIDE + (tidxj + i) * CL_SIZE + tidxi];
        }
        i >>= 1;
    }

    /* i == 1, last reduction step, writing to global mem */
    if (tidxj == 0)
    {
        f.x = f_buf[                  tidxj * CL_SIZE + tidxi] + f_buf[                  (tidxj + i) * CL_SIZE + tidxi];
        f.y = f_buf[    FBUF_STRIDE + tidxj * CL_SIZE + tidxi] + f_buf[    FBUF_STRIDE + (tidxj + i) * CL_SIZE + tidxi];
        f.z = f_buf[2 * FBUF_STRIDE + tidxj * CL_SIZE + tidxi] + f_buf[2 * FBUF_STRIDE + (tidxj + i) * CL_SIZE + tidxi];

        atomicAdd_g_f3(&fout[aidx], f);

        if (bCalcFshift)
        {
            *fshift_buf += f;
        }
    }
}

/*! Final i-force reduction wrapper; calls the generic or pow2 reduction depending
 *  on whether the size of the array to be reduced is power of two or not.
 */
static inline __device__
void reduce_force_i(__local float *f_buf, __global float3 *f,
                    float3 *fshift_buf, bool bCalcFshift,
                    int tidxi, int tidxj, int ai)
{
    if ((CL_SIZE & (CL_SIZE - 1)))
    {
        reduce_force_i_generic(f_buf, f, fshift_buf, bCalcFshift, tidxi, tidxj, ai);
    }
    else
    {
        reduce_force_i_pow2(f_buf, f, fshift_buf, bCalcFshift, tidxi, tidxj, ai);
    }
}

/////////////*! Final i-force reduction; this implementation works only with power of two
//////////// *  array sizes and with sm >= 3.0
//////////// */
////////////#if 0
////////////static inline __device__
////////////void reduce_force_i_warp_shfl(float3 fin, float3 *fout,
////////////                              float3 *fshift_buf, bool bCalcFshift,
////////////                              int tidxj, int aidx)
////////////{
////////////    int j;
////////////
////////////#pragma unroll 2
////////////    for (j = 0; j < 2; j++)
////////////    {
////////////        fin.x += __shfl_down(fin.x,  CL_SIZE<<j);
////////////        fin.y += __shfl_down(fin.y,  CL_SIZE<<j);
////////////        fin.z += __shfl_down(fin.z,  CL_SIZE<<j);
////////////    }
////////////
////////////    /* The first thread in the warp writes the reduced force */
////////////    if (tidxj == 0 || tidxj == 4)
////////////    {
////////////        atomicAdd(&fout[aidx], fin);
////////////
////////////        if (bCalcFshift)
////////////        {
////////////            fshift_buf->x += fin.x;
////////////            fshift_buf->y += fin.y;
////////////            fshift_buf->z += fin.z;
////////////        }
////////////    }
////////////}
////////////#endif
////////////
/////////////*! Energy reduction; this implementation works only with power of two
//////////// *  array sizes.
//////////// */
////////////static inline __device__
////////////void reduce_energy_pow2(volatile __local float *buf,
////////////                        float *e_lj, float *e_el,
////////////                        unsigned int tidx)
////////////{
////////////    int     i, j;
////////////    float   e1, e2;
////////////
////////////    i = WARP_SIZE/2;
////////////
////////////    /* Can't just use i as loop variable because than nvcc refuses to unroll. */
////////////# pragma unroll 10
////////////    for (j = WARP_SIZE_POW2_EXPONENT - 1; j > 0; j--)
////////////    {
////////////        if (tidx < i)
////////////        {
////////////            buf[              tidx] += buf[              tidx + i];
////////////            buf[FBUF_STRIDE + tidx] += buf[FBUF_STRIDE + tidx + i];
////////////        }
////////////        i >>= 1;
////////////    }
////////////
////////////    /* last reduction step, writing to global mem */
////////////    if (tidx == 0)
////////////    {
////////////        e1 = buf[              tidx] + buf[              tidx + i];
////////////        e2 = buf[FBUF_STRIDE + tidx] + buf[FBUF_STRIDE + tidx + i];
////////////
////////////        atomicAdd(e_lj, e1);
////////////        atomicAdd(e_el, e2);
////////////    }
////////////}
////////////
/////////////*! Energy reduction; this implementation works only with power of two
//////////// *  array sizes and with sm >= 3.0
//////////// */
////////////#if 0
////////////static inline __device__
////////////void reduce_energy_warp_shfl(float E_lj, float E_el,
////////////                             float *e_lj, float *e_el,
////////////                             int tidx)
////////////{
////////////    int i, sh;
////////////
////////////    sh = 1;
////////////#pragma unroll 5
////////////    for (i = 0; i < 5; i++)
////////////    {
////////////        E_lj += __shfl_down(E_lj, sh);
////////////        E_el += __shfl_down(E_el, sh);
////////////        sh   += sh;
////////////    }
////////////
////////////    /* The first thread in the warp writes the reduced energies */
////////////    if (tidx == 0 || tidx == WARP_SIZE)
////////////    {
////////////        atomicAdd(e_lj, E_lj);
////////////        atomicAdd(e_el, E_el);
////////////    }
////////////}
////////////#endif /* __CUDA_ARCH__ */

#endif /* NBNXN_OPENCL_KERNEL_UTILS_CLH */
